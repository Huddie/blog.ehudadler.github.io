<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Ramble Ramble</title><description>Learning everyday</description><link>blog.ehudadler.com</link><language>en</language><lastBuildDate>Mon, 27 Jun 2022 20:29:19 -0400</lastBuildDate><pubDate>Mon, 27 Jun 2022 20:29:19 -0400</pubDate><ttl>250</ttl><atom:link href="blog.ehudadler.com/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">blog.ehudadler.com/swift/cxx-interop-flow</guid><title>.cpp/.h to Swift AST Flow</title><description>The flow that cpp files take to get read and processed by the swift compiler</description><link>blog.ehudadler.com/swift/cxx-interop-flow</link><pubDate>Mon, 27 Jun 2022 23:37:00 -0400</pubDate><content:encoded><![CDATA[<h1>.cpp/.h to Swift AST Flow</h1><p>In order for the swift compiler to properly understand cxx it needs to be able to read and process <code>.cpp</code> and <code>.h</code> files. Instead of writing all the code necessary to do this, the swift compiler embeds into itself the clang compiler (<a href="https://github.com/llvm/llvm-project/tree/main/clang">clang</a> is llvm backed CXX compiler which is also written in CXX). It then needs to map the created clang AST (<a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree">Abstract Syntax Tree</a>) into a valid swift AST.</p><p>We will start the journey of interop in the <code>ClangImporter.cpp</code> class found <a href="https://github.com/apple/swift/blob/3d950362b42650534377013f5f310647b709d6a2/lib/ClangImporter/ClangImporter.cpp">here</a>.</p><p>This file is long (just shy of 6k lines!) but in essence it’s the orchestrator for cxx interop.</p><h2>ClangImporter</h2><p>Like many classes in the swift compiler, <code>ClangImporter</code> has a <code>create</code> method which is used to actually build the class (its actual constructor is <code>private</code>). We can find this method <a href="https://github.com/apple/swift/blob/3d950362b42650534377013f5f310647b709d6a2/lib/ClangImporter/ClangImporter.cpp#L1199">here</a> (<a href="https://github.com/apple/swift/blob/3d950362b42650534377013f5f310647b709d6a2/include/swift/ClangImporter/ClangImporter.h#L168">.h here</a>). Here is the signature:</p><pre><code><div class="highlight"><span></span><span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">ClangImporter</span><span class="o">&gt;</span>
<span class="n">ClangImporter</span><span class="o">::</span><span class="n">create</span><span class="p">(</span>
  <span class="n">ASTContext</span> <span class="o">&amp;</span><span class="n">ctx</span><span class="p">,</span>
  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">swiftPCHHash</span><span class="p">,</span> 
  <span class="n">DependencyTracker</span> <span class="o">*</span><span class="n">tracker</span><span class="p">,</span>
  <span class="n">DWARFImporterDelegate</span> <span class="o">*</span><span class="n">dwarfImporterDelegate</span>
<span class="p">)</span>
</div></code></pre><p>Looking at this method may seem scary as all but 1 of the passed in arguments seem foreign. The three important parameters here (in regards to the importer) are the <code>ASTContext</code>, <code>DependencyTracker</code> and <code>DWARFImporterDelegate</code> . All 3 are used in the first line of the function to create the actual <code>ClangImporter</code></p><pre><code><div class="highlight"><span></span><span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">ClangImporter</span><span class="o">&gt;</span> <span class="n">importer</span><span class="p">{</span>
    <span class="k">new</span> <span class="n">ClangImporter</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">tracker</span><span class="p">,</span> <span class="n">dwarfImporterDelegate</span><span class="p">)};</span>
</div></code></pre><p><strong>ASTContext (<a href="https://github.com/apple/swift/blob/3d950362b42650534377013f5f310647b709d6a2/include/swift/ClangImporter/ClangImporter.h#L154">docstring</a>)</strong></p><p>We will go into this more in the future but I want to give a quick rundown on what the <code>ASTContext</code> is given how important it is in the swift compiler.</p><p>In swift, when creating global/static variables, you generally need to store them in a “Context“ (Think <a href="https://stackoverflow.com/questions/12825148/what-is-the-meaning-of-the-term-arena-in-relation-to-memory">Arena allocation</a>). In our case we are passing in an ASTContext (meaning this Context will exist while the swift AST exists). A Context‘s job is to allocate memory for new objects and keep objects ”alive“ until the Context itself is destroyed at which time all objects added to the context are destroyed as well.</p><p>For example, in swift, strings are generally stored in an object called a <code>StringRef</code> instead of an <code>std::string</code>. A <code>StringRef</code> acts like <code>std::string</code> but its lifetime is determined by the “Context” which it belongs to. For that reason creating a <code>StringRef</code> and not assigning it to a context is akin to a “dangling pointer“. Swift makes creating certain objects easy, for example: <code>ASTContext::getIdentifier(StringRef)</code> which will create an <code>Identifier</code> and assign it to the <code>ASTContext</code> for you.</p><p><strong>DependencyTracker (<a href="https://github.com/apple/swift/blob/3d950362b42650534377013f5f310647b709d6a2/include/swift/ClangImporter/ClangImporter.h#L160">docstring</a>)</strong></p><p>Generally created in frontend.cpp <a href="https://github.com/apple/swift/blob/3d950362b42650534377013f5f310647b709d6a2/lib/Frontend/Frontend.cpp#L336">here</a> the dependency tracker is used to help use find other modules which the current module we are compiling depend on.</p><p><strong>DWARFImporterDelegate (<a href="https://github.com/apple/swift/blob/3d950362b42650534377013f5f310647b709d6a2/include/swift/ClangImporter/ClangImporter.h#L162">docstring</a>)</strong></p><p>DWARF (Debugging With Arbitrary Record Format) is a file format used by debuggers. This delegate is used to synthesize clang Decls from debug info.</p><h3>How ClangImporter is used</h3><p>The <code>ClangImporter</code> inherits from ClangModuleLoader (<a href="https://github.com/apple/swift/blob/3d950362b42650534377013f5f310647b709d6a2/include/swift/ClangImporter/ClangImporter.h#L126">here</a>) which inherits from ModuleLoader (<a href="https://github.com/apple/swift/blob/3d950362b42650534377013f5f310647b709d6a2/include/swift/AST/ClangModuleLoader.h#L116">here</a>). This is important because now that <code>ClangImporter</code> inherits from ModuleLoader, it can be added (<a href="https://github.com/apple/swift/blob/3d950362b42650534377013f5f310647b709d6a2/include/swift/AST/ASTContext.h#L972">using ASTContext::<code>addModuleLoader</code></a>) to the <code>ASTContext</code> like other ModuleLoaders.</p><p>We now have a better picture of how cxx interop fits into the Swift compiler. When adding cxx interop the idea was to add a new <code>ModuleLoader</code> which understood cxx and could return swift versions of those cxx decls when requested (ClangModuleLoader). Adding new ModuleLoaders occurs <a href="https://github.com/apple/swift/blob/3d950362b42650534377013f5f310647b709d6a2/lib/Frontend/Frontend.cpp#L487">here</a> in <code>frontend.cpp,</code> our <code>ClangImporter::create</code> function occurs a few lines later (<a href="https://github.com/apple/swift/blob/3d950362b42650534377013f5f310647b709d6a2/lib/Frontend/Frontend.cpp#L527">here</a>) and finally it is added as a module loader <a href="https://github.com/apple/swift/blob/3d950362b42650534377013f5f310647b709d6a2/lib/Frontend/Frontend.cpp#L574">here</a>. ASTContext exposes the clang module loader explicitly using <code>ClangModuleLoader ASTContext::getClangModuleLoader</code> which in turn exposes all the necessary methods for perform interop to the rest of the swift compiler!</p>]]></content:encoded></item><item><guid isPermaLink="true">blog.ehudadler.com/swift/swift-cxx-interop</guid><title>Swift/CXX Interop Intro</title><description>Overview of the Swift/CXX Introp series</description><link>blog.ehudadler.com/swift/swift-cxx-interop</link><pubDate>Mon, 27 Jun 2022 22:37:00 -0400</pubDate><content:encoded><![CDATA[<h1>CPP Interoperability</h1><p>Welcome to the CPP Interoperability series! The point of this blog series is to walk through the different parts of the Swift Compiler which enable CPP Interoperability.</p><p>I am writing this blog series because I have learn't from my initial contributions that starting is daunting but completely doable with a helping hand. Someone to explain the different parts, the flow, etc.</p><p>For the purpose of this series I will assume you already have the Swift compiler setup and building. The series will focus <em>less</em> on building/running and more on walking through the code and explaining where things live, how tests are written/work, etc.</p><p>Hopefully by following this series you will be able to contribute to swift yourself! (at least to the cxx interop portion).</p><h3>Enabling CXX Interop</h3><p>Although I said I would not focus much on setup, one important note related to cxx interop today is that it is <em>not </em>enabled out-of-the-box. To enable cxx interop we must pass the <code>-enable-experimental-cxx-interop</code> compiler flag to the compiler.</p><h3>Where in the repo we will be focused</h3><p>Lucky for us the CXX Interop part of the compiler is fairly isolated inside the <code>swift/lib/ClangImporter</code> folder.</p><p>I will leave us here and pick up the next post on the flow!</p>]]></content:encoded></item><item><guid isPermaLink="true">blog.ehudadler.com/finance/tenK_3</guid><title>Boeings 10K</title><description>Start looking into an old Boeing 10K.</description><link>blog.ehudadler.com/finance/tenK_3</link><pubDate>Sun, 7 Mar 2021 17:31:00 -0500</pubDate><content:encoded><![CDATA[<h1>Boeing</h1><p>Alright, I feel I have used the word "Introduction" in many of the previous posts as a way of saying: I'm not ready to start the meat of this series yet. Not today. Today we open the Boeing 10-K and get to work.</p><p>10-K (<a href="https://www.sec.gov/Archives/edgar/data/0000012927/000001292720000014/a201912dec3110k.htm">BA 2019 10-K</a>).</p><blockquote><p>Although this maybe repetative I will reiterate the 10-K item definitions from last post for completeness</p></blockquote><hr><h3>Part 1</h3><h4>Item 1:</h4><blockquote><p>" “Business” requires a description of the company’s business, including its main products and services, what subsidiaries it owns, and what markets it operates in. This section may also include information about recent events, competition the company faces, regulations that apply to it, labor issues, special operating costs, or seasonal factors. This is a good place to start to understand how the company operates."As mentioned previously I suggest writing your own verison of Item 1 and see if it matches the companies.</p></blockquote><p>I know boeing produces airplanes for major airlines and happend to be aware that they are involved in the defense and space sectors as well. I can't recall what other buisnesses they are in but the 10-K will enlighten us.</p><p>Reading the 10-K we see Beoing list out their buisnesses:</p><ol><li>Commerical Airplanes</li><li>Defense, Space and Security</li><li>Global Services</li><li>Boeing Captial</li></ol><p>They then go ahead and summerize each of them for us. This is super awesome.</p><h5>Commerical Airplanes</h5><p>Just as expected Boeing claims they are a leader in this sector. Here we learn about the products they offer. Specifically: "737 narrow-body model and the 747, 767, 777 and 787 wide-body models".</p><h5>Defense, Space and Security</h5><p>This section is more interesting since we are generally less aware of this segement of their buisness.</p><p>They mention that Boeing has R&amp;D in manned and unmanned aircrafts. This makes sense and seems like a good place for boeing to do buisness. Glad to see them in using their aircraft abilities in other products.</p><p>They go on to mention many other military sounding products (missiles etc). The point here is that Boeings knowledge is not only being used on commerical airplanes but is used in many other products, even those that aren't aircrafts per say.</p><p>Additionally they seem to be involved with building and deploying satellites.</p><h5>Global Services</h5><p>Fairly short section. Doesn't seem like anything too interesting. That said, this section seems to be Boeings "Customer Support" segment and we know now that Boeing had <strong>major</strong> 787 issues. Seemingly this segment would have dealt with that mess.</p><h5>Boeing Capital Segment</h5><p>This segment seems like something worth keeping an eye on. First off let's just explain what this segment does. This segment is there to help customers of Boeing finance their orders. From the sound of it, Boeing offers an extremely expensive product and its customers need a way of paying for their purchases overtime. The fact that Boeing has a segement dedicated to, from what it sounds like, loaning and help finance their customers orders means their customers must do this often/always and Boeing feels either the free market wont provide this financing option or it will if the free market will, it will be too expensive leading to a loss in customers.</p><p>In short, it appears to be in Boeing's best interest to provide financing themselves.</p><p>This is a segment worth keeping an eye out for because its clear (I think) from here that Boeing will be a company with either loads of debt or low net income. They are selling product without immediate payment. This means for R&amp;D they either need to take more money out of their bank account (since they can't use money they were paid for their product since nobodies paid yet) or get loans.</p><p>For a moment lets pretend we it's Feburary 2020, the corona virus is a new pathogen wreaking havic and the news has just announced, airlines are pausing travel.</p><p>As an investor in Boeing you first think: If airlines can't buy planes, Boeings earnings will suffer. This is not ideal but not cause of alarm. You then think about more and realize that maybe some airlines go out of buisness, that could be bad for Boeing since that won't only hurt Boeings next quarterly earnings but potentially have a longer lasting effect. Still Boeing as a company wont collapse because of this.</p><p>But then you think about this segment of Boeings business. Your eyes widen, palms sweaty.</p><p>American airlines just recently refreshed their fleet of airplans. That means they bought and were delivered Boeing jets but most likely acquired them via Boeings Capital Segment. Meaning they probably haven't paid Boeing for them in full yet. What if they go bankrupt? Boeing will suffer massive loses in that case. What if other airlines who have purchased Beoing aircrafts with financing through Boeing go bankrupt?</p><p>This would be a massive problem. You as an investor would want to make sure Boeing had enough captial to remain solvant. You'd purhaps be looking to see if Boeing sells some bonds to raise captial.</p><p>That all about covers the 4 main segments of Boeings buisness. They go on to discuss some other interesting parts of their buisness such as unions and compeition. We'll take a look at that next time.</p>]]></content:encoded></item><item><guid isPermaLink="true">blog.ehudadler.com/finance/tenK_2_breakdown</guid><title>10K Breakdown</title><description>Breaking down a 10K.</description><link>blog.ehudadler.com/finance/tenK_2_breakdown</link><pubDate>Thu, 4 Mar 2021 17:31:00 -0500</pubDate><content:encoded><![CDATA[<p>Picking up where we left off last time, we we're looking at Boeings 10K (<a href="https://www.sec.gov/Archives/edgar/data/0000012927/000001292720000014/a201912dec3110k.htm">BA 2019 10K</a>).</p><p>In this post I want to go over the breakdown of the 10K. This applies to all 10K's but like with many things in this series, we will use the <a href="https://www.sec.gov/Archives/edgar/data/0000012927/000001292720000014/a201912dec3110k.htm">BA 2019 10K</a> as our guide.</p><h2>10K Breakdown</h2><p>There are 4 parts to a 10K filing each broken up into multiple sections (called items). I will name and describe each item using the verbiage written by the SEC. I will then try to explain in a short summary what the SEC means. To see where I am getting the breakdown from check this out: <a href="https://www.sec.gov/fast-answers/answersreada10khtm.html">SEC How to read 10K/10Q</a>.</p><h3>Part 1</h3><h4>Item 1:</h4><blockquote class="quote-blockquote"><p> “Business” requires a description of the company’s business, including its main products and services, what subsidiaries it owns, and what markets it operates in. This section may also include information about recent events, competition the company faces, regulations that apply to it, labor issues, special operating costs, or seasonal factors. This is a good place to start to understand how the company operates.</p></blockquote class="quote-blockquote"><p>If you know the company which you are researching this section may appear dull. I think a good way to read this section is as follows:</p><ol><li>Before reading verbalize to yourself what you would write in this section. What do you think the companies product is? How do you think it operates? What markets do you believe this company operates in?</li><li>Read the section</li><li>Does your understanding of the company and the "companies" understanding match up? If not, do you agree with the way the 10K portrays the companies operations?</li></ol><p>To see why this is important I share the following clip from <a href="https://www.youtube.com/watch?v=cdjaeGH1bdc">The Founder</a>. In this scene we see Harry J. Sonneborn (Accountant) explain the Founder of McDonalds Ray Kroc, that he doesn't realize what business he is in. While Ray Kroc believed his company was in the burger buisness, Harry J. Sonneborn saw McDonalds for what it was/could be, a Real Estate buisness.</p><p>This is, in my opinion, the best scene in the movie and I think giving yourself the chance to see if your understanding of the buisness your researching matches the way the owner/founders/company see's their buisness can be incredibly insightful.</p><h4>Item 1A</h4><blockquote><p>“Risk Factors” includes information about the most significant risks that apply to the company or to its securities. Companies generally list the risk factors in order of their importance. In practice, this section focuses on the risks themselves, not how the company addresses those risks. Some risks may be true for the entire economy, some may apply only to the company’s industry sector or geographic region, and some may be unique to the company.</p></blockquote><p>The SEC does a good job explaining this section. Similar to the section above I suggest trying to think of what risk factors you believe the company faces before reading the ones they mention. What is as important as what they mention is what they <em>don't</em> mention. If you believe there exists some risk factor X which the company doesn't mention, you may feel the company is being naive or their lack of awareness could potentially hurt their bottom line. <strong>It is not good if a company does not recognize a major risk fact.</strong></p><h4>Item 1B</h4><blockquote><p>“Unresolved Staff Comments” requires the company to explain certain comments it has received from the SEC staff on previously filed reports that have not been resolved after an extended period of time. Check here to see whether the SEC has raised any questions about the company’s statements that have not been resolved.</p></blockquote><p>This is not one of those section you can really think about before hand and see if your thoughts match the companies. This section may be interesting if you had a question from a previous financial statement and were curious if it was resolved or answered. Typically we wont spend much time in this section. Unless I learn some new insight that changes that feeling as I write more.</p></br></br>

-----

</br></br>

This concludes Item 1 on the 10K. There are more items in Part 1 and then there are 3 more parts (as mentioned above). Instead of going through all of them in this post I think I will mention the parts as we work through the 10K together.

Next post we will start reading part 1 together. Until next time!
]]></content:encoded></item><item><guid isPermaLink="true">blog.ehudadler.com/general/share-your-knowledge</guid><title>Share your knowledge</title><description>Sharing knowledge is powerful</description><link>blog.ehudadler.com/general/share-your-knowledge</link><pubDate>Mon, 1 Mar 2021 18:59:00 -0500</pubDate><content:encoded><![CDATA[<p>General posts will most likely be the least active section of this blog. I'm not really a personal life "sharer", though I think I'd like to work on that. That said, today I had a great conversation with a friend (Benni) and I wanted to share a simple, most likely unsurprising, idea.</p><p>Put simply, people tend to be too humble when it comes to what they know. I can name only a few friends who during conversation may turn to me and say something like:</p><blockquote class="quote-blockquote"><p>I learnt a really cool excel function I want to show you.</p></blockquote class="quote-blockquote"><p>or</p><blockquote class="quote-blockquote"><p>I learnt something really neat about Diatoms, can I tell you about it?</p></blockquote class="quote-blockquote"><p>or</p><blockquote class="quote-blockquote"><p>Let's get on a call and I'll help you show all the cool stuff I setup on my pi</p></blockquote class="quote-blockquote"><p>I feel people tend to either think:</p><ol><li>The other person probably knows about this</li><li>It's not something worth sharing</li><li>The other person may not know about this, it's cool but they probably won't be interested.</li></ol><p>I can only speak for myself, but all three of these are wrong.</p><p>It's easy to feel once you understanding something that what you just learnt is "trivial". That it's not really that interesting.</p><p>Often it may have took you hours or days to understand but would only take you minutes or seconds to breifly explain. This may give you the <strong>false</strong> impression that it was tough for you but that the concept is simple.</p><p>There is a reason CEO's and people in high up positions make decisions you would not have thought of but end up being great for a company. They have many people under them, acquiring information. Each of the employees may take days to acquire the necessary info but all that data gets compressed into a single report which the CEO reads. It isn't that this CEO is way smarter, it is that they can work off the knowledge of many many employees sharing the information they found.</p><p>Sharing knowledge is a powerful thing. Do not think what you have is trivial, it most likely is not. Not everyone <em>will</em> be interested but plenty are. A lot of people enjoy learning. Create a blog, let those that are interested learn and grow from the fruits of your labor. That is certainly what I hope to do here.</p><p>I feel fortunate that I have a few friends who really do enjoy sharing.</p>]]></content:encoded></item><item><guid isPermaLink="true">blog.ehudadler.com/finance/tenK_1</guid><title>What is a 10-K (Annual Report) and where to find them</title><description>What is a 10-K (Annual Report) and where to find them.</description><link>blog.ehudadler.com/finance/tenK_1</link><pubDate>Mon, 1 Mar 2021 17:31:00 -0500</pubDate><content:encoded><![CDATA[<h1>The 10-K</h1><p>This is the first post in the Annual Report (10-K) Series. The goal is to work through a 10-K together so we can use this new resource to help value companies.</p><p>An annual report is filed yearly (unless there is a change in Fiscal Year, but we'll talk about that a different time) by each and every public company. This is a requirement by the SEC. The 10-K has a very specific breakdown which we will discuss below. Before looking at the breakdown I want to address two (2) questions:</p><ol><li>Why would we want to use the 10-K to value companies in the first place?</li><li>If 10-K's are filed annually then aren't they often "out of date"?</li></ol><br/><h2>Why Would we want to use the 10-K to Value Companies</h2><p>First appealing part of the 10-K is that the 10-K is jam-packed with juicy financial information. This is information we can only get from the company directly and can only get in one of their required filings. There are other financial filings like the 10-Q (we will mention that briefly in the next section) but the 10-K is the only document with a years worth of this data.</p><p>Another really important reason to use the 10-K is that since it's required by the SEC there are laws pertaining to how the companies must file their financials which in turn prevents misleading investors. This gives us (as the investors) a sense of security.</p><p>Piggy-backing off the fact that there are laws pertaining to how the companies must file, we gain another advantage: consistency. Since all companies are required to include the same information, we can compare the information across companies and through time.</p><p>To see why this can be so beneficial, imagine two companies tell you they have 1 million dollars of cash on hand. Knowing how much cash a company has is certainly an interesting piece of information. Without any reliable, legally binding source, all you can do is take each company at its word. Without any additional information, you might assume that each company is worth the 1 million dollars they claimed they had. Suppose you wanted to buy either business. If you were to only go based on the information they provided, you would (in theory) gladly pay 1 million dollars for the cash each company has. While <a href="https://www.investopedia.com/terms/c/cash-is-king.asp">"Cash is King"</a>, what happens if you learn that Company A has 1/2 a million dollars in debt, whereas Company B is clean of any liabilities (meaning no debt). Clearly, all else equal, Company B is the better buy. Without this last (key) bit of information (total liabilities), investors cannot make informed decisions about the companies they seek to purchase.</p><p>This is where the standardization of these financial documents comes in handy. Companies are required to file according to what is known as GAAP accounting standard. More on this later, but in short it guarantees we know how companies are coming up with the numbers they are reporting (at least to some extent).</p><h2>If 10-K's are Filed Annually then Aren't they Often "Out of Date"?</h2><p>This is a good point. A year may sound like a long time and a 10-K is not exactly what you'd want to base investing off of if you were a short term investor but as a long term investor, 1 year is shorter than you think. Of course, lots <em>can</em> happen in a year, and staying up to date with the companies we are investigating is crucial, but the financials from last year are still extremely relevant to this year.</p><p>For more up-to-date financials we can look at the companies 10-Q. A 10-Q is like a 10-K but instead of being filed annually, it's filed quarterly. That means we get 3 10-Q's a year + 1 10-K.</p><p>Although in this series we focus on a 10-K, 10-Q's are as valuable for the financial statements section of this series. There are additional parts of a 10-K which we find useful as well that do not appear in 10-Q's. For this reason we focus on 10-K's but this knowledge carries directly over into 10-Q territory.</p><br/><br/><hr><br/><br/><p>Alright. With those 2 questions aside, let's get our materials. To follow along with this series I suggest downloading Boeing's (NYSE: BA) 2019 10-K (in a moment I will walk you through where to find it, so hang tight). I chose BA because the coronavirus pandemic happened in 2020 and it would be interesting to review Boeings 10-K to see how well positioned they were. Can we feel confident they won't go bankrupt?</p><h2>Finding a Companies 10-K</h2><p>There are 2 ways I feel confident finding a companies 10-K:</p><ol><li>Directly from the companies investor site</li><li>From the SEC</li></ol><br/><p>I'll add a small disclaimer here. Up until now, I've more or less used "Annual Report" and "10-K" synonymously. This is sort of true.</p><p>On the investors site you'll tend to find the <em>Annual Report</em>. It usually is more "put together" then the raw SEC filed 10-K. Both documents contain the relevant financial information, the annual report just maybe displayed in a prettier fashion.</p><h3>Investor Site</h3><p>Most (all?) companies have an investor site. For Apple (AAPL) it is: <a href="https://investor.apple.com">investor.apple.com</a>. For Boeing (BA) it is: <a href="https://investors.boeing.com">investors.boeing.com</a>. A quick Google search can usually point you in the right direction. Once you get on the investor site there's no real trick to finding the 10-K. Each company lays out their sites in their own way. My suggestion is you look for "financial statements" or something along those lines. In Boeing's case there is a "Financial Reports" section <a href="https://investors.boeing.com/investors/financial-reports">investors.boeing.com/investors/financial-reports</a>.</p><h3>SEC</h3><p>I suggest getting the 10-K from the SEC directly. My main reason is that the styling of the report is relatively consistent across different companies and because it doesn't require finding different companies investor sites and navigating them.</p><p>To get a 10-K from the SEC we can head over to their search website: <a href="https://www.sec.gov/edgar/search">https://www.sec.gov/edgar/search</a>.</p><p>From here there is an option to search by Ticker. Boeing's ticker is BA so go ahead and put that into the "Company name, ticker, CIK number or individual's name" search box.</p><p>Make sure that "Filing category" is set to: "All annual, quarterly, and current reports".</p><p>The first 10-K in the list is the most recent one. If want to filter to show 10-K's only click the "Form" button on the left side and check the 10-K box.</p><p>We will be looking BA's 2019 10-K so go ahead and select that one or click this <a href="https://www.sec.gov/Archives/edgar/data/0000012927/000001292720000014/a201912dec3110-K.htm">here</a>. Just keep in mind the 2019 10-K was filed in 2020. Make sure you select the one with a 2019 "Reporting for" date.</p><p>For now I suggest opening the link and scrolling around. Next post we will break down the different sections.</p><p>[Edited by: Elliot Eisenberg] 🙏</p>]]></content:encoded></item><item><guid isPermaLink="true">blog.ehudadler.com/finance/value</guid><title>Why determining a company's value matters</title><description>Good companies do not always equate to good investments. Valuating a company properly is step number one in filtering for good investments.</description><link>blog.ehudadler.com/finance/value</link><pubDate>Mon, 8 Feb 2021 15:58:00 -0500</pubDate><content:encoded><![CDATA[<tldr><p><strong>TL;DR</strong><br/>Good companies to not always equate to good investments. Valuating a company properly is step number one in filtering for good investments.</p><hr/></tldr><p>I've heard the following investment advice:</p><blockquote class="quote-blockquote"><p>You should invest in what you believe in.</p></blockquote class="quote-blockquote"><p>I think the following captures the point better:</p><blockquote class="quote-blockquote"><p>You should believe in what you invest in.</p></blockquote class="quote-blockquote"><p>At first these two statements seem to be saying similar things, but in reality, I think the similarities are dwarfed by their differences.</p><p>Let's look at an example. Imagine some company, MOON, is trading for $100/share. I feel that MOON is a fantastic company. They sell real estate on the moon and I'm convinced MOON is the future of real estate. The notion of "You should invest in what you believe in" would suggest that I buy some shares of MOON, and actively invest in them, because I <em>believe</em> in them. On the other hand, "You should believe in what you invest in" doesn't suggest this at all. It does not take a position on what I should invest in; it says that <em>if</em> I choose to invest, I should believe in that company.</p><p>I bring this distinction up to highlight the following point: <strong>The fact that you believe a company is fantastic, does not necessarily mean its worth investing in (even if it really is a fantastic company).</strong></p><p>Let's return to our MOON example. The first question you should be answering (for yourself) is how much do you think MOON is worth (feel free to take into account the fact that you think MOON is fantastic and will grow). Is the answer 1 Billion? 10 Billion?</p><p>Let's say your response is "10 Billion dollars!". What would you say if I told you that MOON has 200,000,000 (two hundred million) outstanding shares. Essentially, you can say that if you bought 1 share of MOON, your 1 share is 1 out of 200,000,000 shares available in the world.</p><p>Doing some quick math we determine that, since MOON is trading at $100/share and since 200,000,000 shares exist, the market is valuing MOON at $100 * 200,000,000 = $20Bn (20 billion dollars).</p><p>Would you still view this as an investment worth making? After all, you just told me that you feel MOON is worth $10Bn (however it was that you came to that conclusion).</p><p>Notice, this fact about MOON's value has <strong>nothing</strong> to do with whether or not MOON is a fantastic company or not. MOON is / is not a fantastic company regardless of whether or not it is a sound investment.</p><p>A natural follow-up question to the previous example is "Well, how do I decide how much I feel company is worth?".</p><p>This is the main question I hope to address in the upcoming posts.</p><p>To this end I suggest (and will try) in the following posts to pretend we live in a world where the stock market does not exist. There is really no use of the stock market aside from being able to buy and sell assets. Using stock prices or performance as an indicator of future performance is a common trap, at least for long term investors.</p><p>It is important to remember: <strong>The stock market does not <em>necessarily</em> reflect the state of the economy and the stock price does not <em>necessarily</em> reflect the state of the company.</strong></p><p>To drive this point home we can briefly discuss a recent and famous example. I wont go into too much detail here, but recently GME (GameStop) experienced what is known as a <a href="https://www.investopedia.com/terms/s/shortsqueeze.asp">short squeeze</a>. The interesting part, for our discussion, is that investors, such as <a href="https://en.wikipedia.org/wiki/Michael_Burry">Michael Burry</a> (remember him from last post? The guy who predicted the stock market crash of 2008!), bought shares of GME at ~$3 not in hopes of a short squeeze, but because they believed GME was <em>undervalued</em>. The reason they felt this was that the stock price for GME multiplied by the number of outstanding shares was <em>less</em> than GME book value. Meaning if GME went bankrupt and sold all its inventory and other <a href="https://www.investopedia.com/terms/a/asset.asp">assets</a> to settle all of its outstanding debts, there would be more value remaining than what the stock market currently valued it at (which makes little sense).</p><p>This is what we may call a <em>value play</em>. It is clear that the market is undervaluing GME (Even though GME may not be a great company. Afterall, whose buying console CD's nowadays?).</p><p>Starting in the next post we will look at a companies annual report (10k). This report is filed yearly by every single public company. It contains all the financial information necessary for us (as investors) to understand the value of a company. It describes the companies debt, assets, equity, outlook (from the management's perspective), etc.</p><p>Together, we will work our way through a 10k, working hard to understand each section and learn what exactly it can tell us about the company.</p><p>The overarching goal will be to one day be able to read a 10k and determine what we feel the true value of the company is. That way we can then look at what value the market as assigned that company and make educated buy/sell decisions.</p><p>[Edited by: Elliot Eisenberg] 🙏</p>]]></content:encoded></item><item><guid isPermaLink="true">blog.ehudadler.com/finance/intro</guid><title>Intro</title><description>Intro to the finance series. What it's about and why I am writing it.</description><link>blog.ehudadler.com/finance/intro</link><pubDate>Wed, 3 Feb 2021 18:58:00 -0500</pubDate><content:encoded><![CDATA[<tldr><p><strong>TL;DR</strong><br/>Insider trading is bad. Financial information isn't free (expensive!), and kinda hard to get. I'm gonna get it anyways. Join me for my journey</p><hr/></tldr><h1>Intro</h1><p>Hi 👋. Welcome to my Finance series. I lay out below what I hope to achieve in this blog series. If you want to know more about me check out my General series.</p><h1>Finance</h1><p>There are a two main reasons I got interested in finance. First was the movie <a href="https://www.imdb.com/title/tt1596363/">"The Big Short"</a> and second was <a href="https://en.wikipedia.org/wiki/2020_stock_market_crash">the big crash of 2020</a>.</p><p>The idea of being able to "see" what nobody else can see is something that I find fascinating. In "The Big Short", <a href="https://en.wikipedia.org/wiki/Michael_Burry">Michael Burry</a> does just that. Looking at an excel spreadsheet filled with the information on multiple <a href="https://www.investopedia.com/terms/m/mbs.asp">Mortgage-Backed Securities (MBS)</a> he was able to predict the 2008 financial crisis. (Yes I am aware that it may not have been reading spreadsheets alone, but that will not really matter in this post).</p><p>I remember after that movie thinking, "Man, if only that was me! If only I had read that spreadsheet, came to that same conclusion, I would have made that very same bet!"</p><p><em>Not</em> exactly.</p><p>I begin this series on finance with a mission I am on, but also with a rant about a frustration that I have.</p><h1>Insider Trading</h1><p>I can't remember when I first learned what <em>insider trading</em> was, but I'm fairly confident I didn't care much about it. On the other hand, I <em>do</em> remember reading a fantastic book: <a href="https://en.wikipedia.org/wiki/Den_of_Thieves_(Stewart_book">Den of Thieves (James B. Stewart)</a>) on one of the largest insider trading scandals on Wall Street.</p><p>If you are not familiar, here is the definition of illegal insider trading according to the SEC:</p><blockquote class="quote-blockquote"><p>The buying or selling a security, in breach of a fiduciary duty or other relationship of trust and confidence, on the basis of material, nonpublic information about the security.</p></blockquote class="quote-blockquote"><p>In short, what happened was a bunch of Wall Street finance guys decided to insider trade and make lots of money (duh). Surprised as you may be, they actually got caught, and the SEC actually cared. Michael Milken, one of the main insider traders (trading in Junk Bonds) was sent to jail (and was recently pardoned by President Donald J. Trump).</p><p>Anyways, I recall being shocked how long this scandal lasted and I was relieved to read at the end these thieves were caught. Insider trading is unequivocally wrong.</p><p>But why not? What really is wrong with insider trading? All these traders are doing is leveraging some knowledge in order to profit. Isn't that what large, successful businesses do all of the time with their products? No. It very much so is not.</p><p>According to Investopedia (and arguably common sense) illegal insider trading is defined as:</p><blockquote><p>The question of legality stems from the SEC's attempt to maintain a fair marketplace. An individual who has access to insider information would have an unfair edge over other investors, who do not have the same access, and could potentially make larger, unfair profits than their fellow investors.</p></blockquote><p>In short, we want a <strong>fair</strong> marketplace. Nobody should have an unfair edge.</p><h2>"Fair" &amp; "Public"</h2><p>Although the insider trading section of this post may seem as a bit of a digression, it isn't. In my opinion, it links up really nicely with the start of this post on "The Big Short" and ties right into my rant.</p><p>The marketplace is not "fair". This stems from the fact that public information is not really "public" (in respect to what the SEC means as public, <em>in my opinion</em>).</p><p>About three paragraphs into this post, I was drooling at the fact that if only I had read the spreadsheets that Michael Burry had, I would have made a similar bet (if I had any money), and would have made an absolute killing (To be honest, I probably would have just seen a bunch of numbers and not thought much of it, but lets pretend I would have seen what he saw). In reality, that scenario <em>could not</em> have occurred. I simply would never have had access to those spreadsheets.</p><p>To be honest, I have absolutely no idea from where he got that information. Let's assume he got it from a very common/classical data source: <a href="https://en.wikipedia.org/wiki/Bloomberg_Terminal">Bloomberg terminal</a>.</p><p>A Bloomberg Terminal is one of the (if not the) most common financial pieces of software. It has <em>everything</em> you'd want (from what I hear). If you wanted to get the information on Mortgage-Backed Securities (MBS) like Burry did, you most likely could find it there. Want to know stock prices? They have it, easily accessible. Bond prices? Yup. If its publicly available, they most likely have it.</p><p>So stop ranting Ehud, get Bloomberg Terminal and you can be just like Michael Burry!</p><p>Bloomberg Terminal, according to <a href="https://www.investopedia.com/articles/investing/052815/financial-news-comparison-bloomberg-vs-reuters.asp">Investopedia</a> (somewhere on that page) costs <strong>$24k</strong> a year/user (investopedia cites Wall Street Prep).</p><p>That's about as publicly available / accessible to retail investors as Grandma's Bolognese secret recipe is to your girlfriend of 2.5 months. It ain't.</p><p>Well, what if I wanted to write a bot (computer program) to trade using real-time stock market data? Surely the stock market data is freely accessible to everyone. Nope. Polygon, a stock market data source provider, costs ~$200/month for real-time data (<a href="https://polygon.io/pricing">pricing here</a>).</p><blockquote><p>Disclaimer: I recognize that I've focused on Bloomberg and Polygon alone and that other data providers exist. Other providers maybe cheaper, but the point remains: very little information is easily accessible to the layman, and if it is accessible, its cost can be prohibitive.</p></blockquote><p>The point is this: the marketplace is "fair" for hedge funds, investment banks and other large financial institutions. They really do have access to all the same data once it is publicly available. They share information with each other. Seeing that retail investors have entered the market en masse in recent years it has become clear to me (as a new retail investor interested in data) that the market is not, in fact, fair and that data is not public (unless you have 24 grand lying around, collecting dust).</p><h1>Mission</h1><p>To this end I've been trying to source my own data; company financials, short interest, etc. To do so requires mastering the jargon used on Wall Street. I plan on doing so, and hope I can illuminate some of these topics for you on my journey.</p><p>[Edited by: Elliot Eisenberg] 🙏</p>]]></content:encoded></item><item><guid isPermaLink="true">blog.ehudadler.com/linear/gauss-jordan</guid><title>1.2 Gauss-Jordan</title><description>Extending our matrix class to include gauss-jordan elimination.</description><link>blog.ehudadler.com/linear/gauss-jordan</link><pubDate>Thu, 3 Dec 2020 18:58:00 -0500</pubDate><content:encoded><![CDATA[<p>Welcome back. If you're here for the first time I suggest reading from the beginning of the series (<a href="https://blog.ehudadler.com/linear/matrix/">over here</a>).</p><h1>Recap</h1><p>Last time, which happens to be yesterday, we added gaussian elimination to our matrix class. On the way to doing this we also added a few other helper methods which we can hopefully use throughout this series.</p><h1>1.2 Gauss-Jordan Elimination</h1><p>Today we extend our gaussian elimination (albeit in a new function) to perform gauss-jordan elimination.</p><p>If you recall from last week, we said (not precisely) that gaussian elimination amounts to getting our matrix into the following form:</p><ol><li>Each row is either all zeros or contains a leading 1</li><li>Each leading 1 has only 0's below it</li></ol><p>Our final matrix from last time was:</p><html><header><script type="text/x-mathjax-config">MathJax.Hub.Config({jax: ["input/TeX","output/HTML-CSS"], tex2jax: {inlineMath: [['$$','$$']]} , "HTML-CSS": {linebreaks: {automatic: true}}});</script><script src='https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script></header><body>$$
\begin{bmatrix}
1 & 0 & 33 & 931 & 11\\
0 & 0 & 1 & 33 & 3\\
-0 & -0 & -0 & 1 & 0.0778813\\
-0 & -0 & -0 & -0 & 1\\
0 & 0 & 0 & 0 & 0\\
\end{bmatrix}
$$</body></html><p>We were pleased with our results, though we mentioned we'd like to clean up those negative 0's.</p><p>Gauss-Jordan elimination is the same as Gaussian Elimination but with 1 added rule: All leadings 1's must have <strong>only</strong> zeros below <em>and</em> above it.</p><p>Similar to last time we will start with going over the general algorithm</p><h2>Algorithm</h2><p>Step 1 in our algorithm will be performing Gaussian Elimination (this is an extension after all). At this point our matrix is in <em>row echelon form</em>.</p><p>Next we start from the last row and force each value above our leading 1 to be 0 just as we did when forcing all values below our leading 1 to be 0.</p><p>If the value we are trying to zero out is <code>k</code>, then we want to subtract that row by k times the row our leading 1 is in.</p><h2>Programming</h2><p>I feel like this is very similar to the last article. We can use our subtract <code>_SubtractRowByRowMultiple</code> method and just loop over the matrix bottom right to top left.</p><p>I'll just post the code here. I feel like it shares enough similarities with our Gaussian Elimination method that not much explaination is necessary.</p><p>I commented it to add clarity where I felt this code differed from Gaussian Elimination.</p><pre><code><div class="highlight"><span></span><span class="kt">void</span> <span class="nf">ReduceToReducedRowEchelonForm</span><span class="p">()</span> <span class="p">{</span>

    <span class="c1">// Reduce to row echelon form</span>
    <span class="n">ReduceToRowEchelonForm</span><span class="p">();</span>

    <span class="kt">int32_t</span> <span class="n">r</span> <span class="o">=</span> <span class="n">NumRows</span><span class="p">,</span>
            <span class="n">c</span> <span class="o">=</span> <span class="n">NumCols</span><span class="p">;</span>

    <span class="k">while</span><span class="p">(</span><span class="n">c</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>

        <span class="c1">// Save the current row position in case this column is all 0&#39;s</span>
        <span class="kt">int32_t</span> <span class="n">temp_row</span> <span class="o">=</span> <span class="n">r</span><span class="p">;</span> 

        <span class="c1">// If r == 0 then no work to do so might as well </span>
        <span class="c1">// not consider this leading 1</span>
        <span class="k">for</span><span class="p">(;</span> <span class="n">r</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">r</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="n">matrix_</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">c</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
                    
        <span class="c1">// If we located a leading 1 in row 0 then there is</span>
        <span class="c1">// no work to be done. Just break out. We&#39;re finished</span>
       <span class="k">if</span><span class="p">(</span><span class="n">r</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
           <span class="k">break</span><span class="p">;</span>
       <span class="p">}</span>

       <span class="c1">// No leading 1 found</span>
       <span class="k">if</span><span class="p">(</span><span class="n">r</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
           <span class="n">r</span> <span class="o">=</span> <span class="n">temp_row</span><span class="p">;</span>
           <span class="n">c</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>
           <span class="k">continue</span><span class="p">;</span>
       <span class="p">}</span>
        
        <span class="c1">// Zero out all values above leading 1</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int32_t</span> <span class="n">above_row</span> <span class="o">=</span> <span class="n">r</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">above_row</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">above_row</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">_SubtractRowByRowMultiple</span><span class="p">(</span><span class="n">above_row</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">matrix_</span><span class="p">[</span><span class="n">above_row</span><span class="p">][</span><span class="n">c</span><span class="p">]);</span>
        <span class="p">}</span>

        <span class="n">r</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="n">c</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>This post is short since it's just an extension to last weeks. If we update our <code>main.cpp</code> to the following:</p><pre><code><div class="highlight"><span></span><span class="cp">#include</span> <span class="cpf">&quot;linalg/matrix.h&quot;</span><span class="cp"></span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">mathlib</span><span class="o">::</span><span class="n">linalg</span><span class="o">::</span><span class="n">Matrix</span><span class="o">&lt;</span><span class="kt">float</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="o">&gt;</span> <span class="n">matrix</span><span class="p">;</span>
    <span class="n">matrix</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">,</span>   <span class="mi">0</span><span class="p">,</span>  <span class="mi">33</span><span class="p">,</span>  <span class="mi">931</span><span class="p">,</span>  <span class="mi">11</span><span class="p">,</span>
              <span class="mi">0</span><span class="p">,</span>   <span class="mi">0</span><span class="p">,</span>   <span class="mi">3</span><span class="p">,</span>   <span class="mi">99</span><span class="p">,</span>   <span class="mi">9</span><span class="p">,</span>
              <span class="mi">0</span><span class="p">,</span>   <span class="mi">0</span><span class="p">,</span> <span class="mi">653</span><span class="p">,</span> <span class="o">-</span><span class="mi">125</span><span class="p">,</span> <span class="mi">271</span><span class="p">,</span>
              <span class="mi">0</span><span class="p">,</span>   <span class="mi">0</span><span class="p">,</span>  <span class="mi">77</span><span class="p">,</span>  <span class="o">-</span><span class="mi">30</span><span class="p">,</span> <span class="o">-</span><span class="mi">15</span><span class="p">,</span>
              <span class="mi">0</span><span class="p">,</span>   <span class="mi">0</span><span class="p">,</span>  <span class="mi">95</span><span class="p">,</span>   <span class="mi">61</span><span class="p">,</span>  <span class="o">-</span><span class="mi">9</span><span class="p">;</span>

    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;---------------Matrix---------------&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="n">matrix</span><span class="p">.</span><span class="n">LatexPrint</span><span class="p">();</span>
    <span class="n">matrix</span><span class="p">.</span><span class="n">ReduceToRowEchelonForm</span><span class="p">();</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;-------- Row Echelon Form ----------&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="n">matrix</span><span class="p">.</span><span class="n">LatexPrint</span><span class="p">();</span>
    <span class="n">matrix</span><span class="p">.</span><span class="n">ReduceToReducedRowEchelonForm</span><span class="p">();</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;---- Reduced Row Echelon Form ------&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="n">matrix</span><span class="p">.</span><span class="n">LatexPrint</span><span class="p">();</span>
<span class="p">}</span>
</div></code></pre><p>we can return a get the output (In Latex):</p><html><header><script type="text/x-mathjax-config">MathJax.Hub.Config({jax: ["input/TeX","output/HTML-CSS"], tex2jax: {inlineMath: [['$$','$$']]} , "HTML-CSS": {linebreaks: {automatic: true}}});</script><script src='https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script></header><body>$$

\begin{bmatrix}
1 & 0 & 33 & 931 & 11\\
0 & 0 & 3 & 99 & 9\\
0 & 0 & 653 & -125 & 271\\
0 & 0 & 77 & -30 & -15\\
0 & 0 & 95 & 61 & -9
\end{bmatrix}
\ \
\begin{bmatrix}
1 & 0 & 33 & 931 & 11\\
0 & 0 & 1 & 33 & 3\\
0 & 0 & 0 & 1 & 0.0778813\\
0 & 0 & 0 & 0 & 1\\
0 & 0 & 0 & 0 & 0
\end{bmatrix}
\ \
\begin{bmatrix}
1 & 0 & 0 & 0 & 0\\
0 & 0 & 1 & 0 & 0\\
0 & 0 & 0 & 1 & 0\\
0 & 0 & 0 & 0 & 1\\
0 & 0 & 0 & 0 & 0\\
\end{bmatrix}

$$</body></html><p>Till next time!</p><p>-- Ehud</p>]]></content:encoded></item><item><guid isPermaLink="true">blog.ehudadler.com/linear/gaussian-elimination</guid><title>1.2 Gaussian Elimination</title><description>Adding gaussian elimination to our matrix class</description><link>blog.ehudadler.com/linear/gaussian-elimination</link><pubDate>Wed, 2 Dec 2020 18:58:00 -0500</pubDate><content:encoded><![CDATA[<p>Welcome back. If you're here for the first time I suggest reading from the beginning of the series (<a href="https://blog.ehudadler.com/linear/matrix/">over here</a>).</p><p>I also suggest reading all my blog posts though...</p><h1>Recap</h1><p>I feel like starting off each post in this series with a recap is a good idea.</p><p>Last time we outlined and built the beginning stages of our Matrix class. A matrix is a just a 2d grid filled with numbers. It's always weird recapping your work and remembering that it took like 3 hours to produce but 1 sentence to summarize. I guess what I'm saying is, that's the recap. Onto the main event.</p><h1>1.2 Gaussian Elimination</h1><p>I believe at the end of the last post (yup confirmed) I mentioned this post would deal with gaussian elimination. I've though about it a bit since then and am excited to give this a try.</p><h2>What is Gaussian Elimination?</h2><p>Let's say you're presented with the following problem on a test:</p><html><header><script type="text/x-mathjax-config">MathJax.Hub.Config({jax: ["input/TeX","output/HTML-CSS"], tex2jax: {inlineMath: [['$$','$$']]} , "HTML-CSS": {linebreaks: {automatic: true}}});</script><script src='https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script></header><body>$$
\begin{align}
3x + 8y &= 13\\
6x + 32y &= 84
\end{align}
$$</body></html><p>and asked to find what values you should set x and y to in order to make the equation evaluate to true.</p><p>You may start by inspecting the two equations and testing some values. More likely you will solve one equation (let's say the first one) so that one variable (x for example) is in terms of y. Something like:</p><html><header><script type="text/x-mathjax-config">MathJax.Hub.Config({jax: ["input/TeX","output/HTML-CSS"], tex2jax: {inlineMath: [['$$','$$']]} , "HTML-CSS": {linebreaks: {automatic: true}}});</script><script src='https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script></header><body>$$
\begin{align}
    3x + 8y &= 13 \\
    3x &= 8y + 13 \\
    x &= \frac{8y + 13}{3}
\end{align}
$$</body></html><p>Now you can replace x with</p><html><header><script type="text/x-mathjax-config">MathJax.Hub.Config({jax: ["input/TeX","output/HTML-CSS"], tex2jax: {inlineMath: [['$$','$$']]} , "HTML-CSS": {linebreaks: {automatic: true}}});</script><script src='https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script></header><body>$$
\frac{8y + 13}{3}
$$</body></html><p>and solve regularly. This approach works well when you have 2 equations and 2 unknowns, but what happens with the following:</p><html><header><script type="text/x-mathjax-config">MathJax.Hub.Config({jax: ["input/TeX","output/HTML-CSS"], tex2jax: {inlineMath: [['$$','$$']]} , "HTML-CSS": {linebreaks: {automatic: true}}});</script><script src='https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script></header><body>$$
\begin{align}
3x + 8y - 54z &= 13\\
6x + 32y + z &= 84\\
91x + 82y + 9z &= 344\\
13x + 5y + 8z &= 91\\
\end{align}
$$</body></html><p>Whether or not this has a solution (I have no clue) solving it via substitution is much harder.</p><p>Introducing Gaussian Elimination. Gaussian Elimination is one method for making progress on a problem like this.</p><h2>How Gaussian Elimination Works</h2><p>First off, Gaussian Elimination works on a Matrix. So given our system of equations</p><html><header><script type="text/x-mathjax-config">MathJax.Hub.Config({jax: ["input/TeX","output/HTML-CSS"], tex2jax: {inlineMath: [['$$','$$']]} , "HTML-CSS": {linebreaks: {automatic: true}}});</script><script src='https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script></header><body>$$
\begin{align}
3x + 8y - 54z &= 13\\
6x + 32y + z &= 84\\
91x + 82y + 9z &= 344\\
13x + 5y + 8z &= 91\\
\end{align}
$$</body></html><p>we must produce the matrix:</p><html><header><script type="text/x-mathjax-config">MathJax.Hub.Config({jax: ["input/TeX","output/HTML-CSS"], tex2jax: {inlineMath: [['$$','$$']]} , "HTML-CSS": {linebreaks: {automatic: true}}});</script><script src='https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script></header><body>$$
\begin{bmatrix}
3 & 8 & -54 & 13\\
6 & 32 & 1 & 84\\
91 & 82 & 9 & 344\\
13 & 5 & 8 & 91\\
\end{bmatrix}
$$</body></html><p>Now that we have our matrix, we can discuss the rules.</p><p>There are 3 valid moves you can make while performing Gaussian Elimination</p><ol><li>Swap 2 rows</li><li>Subtract one row by k times another row</li><li>Multiple through a row by k</li></ol><p>For example I can swap row 0 and row 1 and get:</p><html><header><script type="text/x-mathjax-config">MathJax.Hub.Config({jax: ["input/TeX","output/HTML-CSS"], tex2jax: {inlineMath: [['$$','$$']]} , "HTML-CSS": {linebreaks: {automatic: true}}});</script><script src='https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script></header><body>$$
\begin{bmatrix}
6 & 32 & 1 & 84\\
3 & 8 & -54 & 13\\
91 & 82 & 9 & 344\\
13 & 5 & 8 & 91\\
\end{bmatrix}
$$</body></html><p>I can subtract row 1 by 1/2 times row 0 and get:</p><html><header><script type="text/x-mathjax-config">MathJax.Hub.Config({jax: ["input/TeX","output/HTML-CSS"], tex2jax: {inlineMath: [['$$','$$']]} , "HTML-CSS": {linebreaks: {automatic: true}}});</script><script src='https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script></header><body>$$
\begin{bmatrix}
6 & 32 & 1 & 84\\
0 & 8 & -27 & -29\\
91 & 82 & 9 & 344\\
13 & 5 & 8 & 91\\
\end{bmatrix}
$$</body></html><p>And I can multiple row 0 by 1/6 and get</p><html><header><script type="text/x-mathjax-config">MathJax.Hub.Config({jax: ["input/TeX","output/HTML-CSS"], tex2jax: {inlineMath: [['$$','$$']]} , "HTML-CSS": {linebreaks: {automatic: true}}});</script><script src='https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script></header><body>$$
\begin{bmatrix}
1 & \frac{32}{6} & \frac{1}{6} & 14\\
0 & 8 & -27 & -29\\
91 & 82 & 9 & 344\\
13 & 5 & 8 & 91\\
\end{bmatrix}
$$</body></html><p>With these powers we have the following goal:</p><p>Reduce our matrix into row echelon form. This <em>basically</em> (not exact definition) amounts to getting our matrix into the following state: 1. Each row (starting from the left) has one or more 0's a 1 and then anything afterwards. These are called "leading 1's" 2. Each leading 1 has <em>only</em> 0's below it</p><p>Here is an example:</p><html><header><script type="text/x-mathjax-config">MathJax.Hub.Config({jax: ["input/TeX","output/HTML-CSS"], tex2jax: {inlineMath: [['$$','$$']]} , "HTML-CSS": {linebreaks: {automatic: true}}});</script><script src='https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script></header><body>$$
\begin{bmatrix}
1 & 8 & -27\\
0 & 1 & 9\\
0 & 0 & 1\\
\end{bmatrix}
$$</body></html><p>There is a more persice and correct definition to row-echelon form, I suggest looking it up in the textbook (pg. 11)</p><h2>Programming Gaussian Elimination</h2><h3>The algorithm</h3><p>Alright enough math (even though we love it, writing it in latex is still time consuming :p ), let's get into the code.</p><p>The general algorithm for running Gaussian Elimination is to do the following:</p><ol><li>Find the leftmost column, c, which is not only filled with 0's</li><li>If the value in the top row is 0 swap the top row with a row whose value in that column is not 0.</li><li>Now let's say the value in the row 0, column c is k. Multiply row 0 by 1/k</li><li>Since k * (1/k) = 1 we now have our leading 1. If the value in row 1 below our leading 1 is v, subtract row 1 by v * row 0. This will cause the value below our leading 1 to become 0, which is exactly what we want.</li><li>Repeat this process by covering row 0 and pretending row 1 is not the top most row.</li></ol><p>I won't show an example here since once we get to programming we'll be able to run through many examples.</p><h3>Outline</h3><p>I think breaking these steps into there own methods (functions) is a good approach here. We can have:</p><ol><li>Locate leftmost ( not all 0's ) column</li><li>Find row with none 0's value</li><li>Swap rows</li><li>Multiply row by value</li><li>Subtract row by row</li></ol><h3>Locate Left Most Column</h3><p>At first I felt the title line for this method should be:</p><pre><code><div class="highlight"><span></span><span class="n">std</span><span class="o">::</span><span class="n">optional</span><span class="o">&lt;</span><span class="kt">uint32_t</span><span class="o">&gt;</span> <span class="n">_LocateLeftMostNoneZeroColumn</span><span class="p">()</span>
</div></code></pre><p>Now I realize that after the first iteration of our Gaussian Elimination algorithm we will end up with a column with a single 1 and 0's below it but that if we called this method again, it would return the same column back to us. We need a way of telling this method not to consider certain columns. For now I think we can use a single integer to specify which row/column to start with. Now our title line is:</p><pre><code><div class="highlight"><span></span><span class="n">std</span><span class="o">::</span><span class="n">optional</span><span class="o">&lt;</span><span class="kt">uint32_t</span><span class="o">&gt;</span> <span class="n">_LocateLeftMostNoneZeroColumn</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">uint32_t</span><span class="p">,</span> <span class="kt">uint32_t</span><span class="o">&gt;</span>  <span class="o">&amp;</span><span class="n">start</span><span class="p">)</span>
</div></code></pre><p>I am using <code>std::optional</code> here in case there does not exist a left most none zero column. In such a case we will return a nil optional.</p><p>The body of this method should be fairly straight forward. We loop over the matrix column by column checking if we can find one with a none 0 row value. Once we find one, return that column.</p><pre><code><div class="highlight"><span></span><span class="n">std</span><span class="o">::</span><span class="n">optional</span><span class="o">&lt;</span><span class="kt">uint32_t</span><span class="o">&gt;</span> <span class="n">_LocateLeftMostNoneZeroColumn</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">uint32_t</span><span class="p">,</span> <span class="kt">uint32_t</span><span class="o">&gt;</span>  <span class="o">&amp;</span><span class="n">start</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">const</span> <span class="k">auto</span> <span class="p">[</span><span class="n">start_row</span><span class="p">,</span> <span class="n">start_col</span><span class="p">]</span> <span class="o">=</span> <span class="n">start</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">uint32_t</span> <span class="n">c</span> <span class="o">=</span> <span class="n">start_col</span><span class="p">;</span> <span class="n">c</span> <span class="o">&lt;</span> <span class="n">NumCols</span><span class="p">;</span> <span class="n">c</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">uint32_t</span> <span class="n">r</span> <span class="o">=</span> <span class="n">start_row</span><span class="p">;</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="n">NumRows</span><span class="p">;</span> <span class="n">r</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">matrix_</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">c</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="n">c</span><span class="p">;</span> 
            <span class="p">}</span>
        <span class="p">}</span> 
    <span class="p">}</span>
    <span class="k">return</span> <span class="p">{};</span>
<span class="p">}</span>
</div></code></pre><h3>Locate Row With None 0 Value</h3><p>Turns out that we already did this work in the previous step, though we did't make use of it. We only returned the column previously but now I am thinking we can return a pair (column, row). Let's modify our title line and function body.</p><pre><code><div class="highlight"><span></span><span class="n">std</span><span class="o">::</span><span class="n">optional</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">uint32_t</span><span class="p">,</span> <span class="kt">uint32_t</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">_LocateNextLeadingOnePosition</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">uint32_t</span><span class="p">,</span> <span class="kt">uint32_t</span><span class="o">&gt;</span>  <span class="o">&amp;</span><span class="n">start</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">const</span> <span class="k">auto</span> <span class="p">[</span><span class="n">start_row</span><span class="p">,</span> <span class="n">start_col</span><span class="p">]</span> <span class="o">=</span> <span class="n">start</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">uint32_t</span> <span class="n">c</span> <span class="o">=</span> <span class="n">start_col</span><span class="p">;</span> <span class="n">c</span> <span class="o">&lt;</span> <span class="n">NumCols</span><span class="p">;</span> <span class="n">c</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">uint32_t</span> <span class="n">r</span> <span class="o">=</span> <span class="n">start_row</span><span class="p">;</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="n">NumRows</span><span class="p">;</span> <span class="n">r</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">matrix_</span><span class="p">[</span><span class="n">r</span><span class="p">][</span><span class="n">c</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">c</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span> 
    <span class="p">}</span>
    <span class="k">return</span> <span class="p">{};</span>
<span class="p">}</span>
</div></code></pre><p>That's better. Killed two steps with 1 function change (as they say).</p><h3>Swap Rows</h3><p>This one is going to require its own function. On the bright side, cpp <code>std::vector</code> comes with a fancy <code>vectorA.swap(vectorB)</code> method (found <a href="https://www.cplusplus.com/reference/vector/vector/swap/">here</a>).</p><p>I think this seems cool, let's use that one.</p><pre><code><div class="highlight"><span></span><span class="kt">void</span> <span class="nf">_SwapRows</span><span class="p">(</span><span class="k">const</span> <span class="kt">uint32_t</span> <span class="o">&amp;</span><span class="n">row1</span><span class="p">,</span> <span class="k">const</span> <span class="kt">uint32_t</span> <span class="o">&amp;</span><span class="n">row2</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">matrix_</span><span class="p">[</span><span class="n">row1</span><span class="p">].</span><span class="n">swap</span><span class="p">(</span><span class="n">matrix_</span><span class="p">[</span><span class="n">row2</span><span class="p">]);</span>
<span class="p">}</span>
</div></code></pre><p>The cpp reference website says time complexity for this swap is constant time. Love to see that.</p><h3>Multiply Row by Value</h3><p>This function also seems pretty straight forward. We'll take some value k as an argument and multiply each value in our row by k.</p><pre><code><div class="highlight"><span></span><span class="kt">void</span> <span class="nf">_ScaleRowBy</span><span class="p">(</span><span class="k">const</span> <span class="kt">uint32_t</span> <span class="o">&amp;</span><span class="n">row</span><span class="p">,</span> <span class="k">const</span> <span class="n">Type</span> <span class="o">&amp;</span><span class="n">k</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="o">&amp;</span><span class="nl">elm</span> <span class="p">:</span> <span class="n">matrix_</span><span class="p">[</span><span class="n">row</span><span class="p">])</span> <span class="p">{</span>
        <span class="n">elm</span> <span class="o">*=</span> <span class="n">k</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>Here <code>elm</code> is a reference to the value in our row. That is why modifying <code>elm</code> modifies the value in our row.</p><p>This function, as it stands, will help for scaling a row by a value. On the other hand, this function fails to solve the Guassian Elimination step which subtracts one row by the scaled version of another. This is because when we want to subtract row A but k * row B, we <strong>don't</strong> want to actually modify row B.</p><p>We deal with this in the next section.</p><h3>Modifying Row A by Another Row</h3><p>I think the idea of modifying a row can occur in different scenarios and therefore making this type of function more generic would be a good idea. I am going to paste my thought below and then go over it:</p><pre><code><div class="highlight"><span></span><span class="kt">void</span> <span class="nf">_ModifyRowBy</span><span class="p">(</span><span class="k">const</span> <span class="kt">uint32_t</span> <span class="o">&amp;</span><span class="n">row</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="k">const</span> <span class="n">Type</span> <span class="o">&amp;</span><span class="p">(</span><span class="k">const</span> <span class="kt">uint32_t</span> <span class="o">&amp;</span><span class="n">col</span><span class="p">,</span> <span class="k">const</span> <span class="n">Type</span> <span class="o">&amp;</span><span class="n">row_value</span><span class="p">)</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">modifier</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">uint32_t</span> <span class="n">col</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="o">&amp;</span><span class="nl">elm</span> <span class="p">:</span> <span class="n">matrix_</span><span class="p">[</span><span class="n">row</span><span class="p">])</span> <span class="p">{</span>
        <span class="n">elm</span> <span class="o">=</span> <span class="n">modifier</span><span class="p">(</span><span class="n">col</span><span class="p">,</span> <span class="n">elm</span><span class="p">);</span>
        <span class="n">col</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>Alright let's break down the title line. We request that the caller pass in the row they want to modify (first argument) and a function (second argument) which given a column number and a value returns a new value.</p><p>We can then take that new value, and set our rows value to that new value.</p><p>Let's take a look at using our <code>_ModifyRowBy</code> function to perform our "Multiply Row by Value" function.</p><p>Previously our "Multiply Row by Value" function was:</p><pre><code><div class="highlight"><span></span><span class="kt">void</span> <span class="nf">_ScaleRowBy</span><span class="p">(</span><span class="k">const</span> <span class="kt">uint32_t</span> <span class="o">&amp;</span><span class="n">row</span><span class="p">,</span> <span class="k">const</span> <span class="n">Type</span> <span class="o">&amp;</span><span class="n">k</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="o">&amp;</span><span class="nl">elm</span> <span class="p">:</span> <span class="n">matrix_</span><span class="p">[</span><span class="n">row</span><span class="p">])</span> <span class="p">{</span>
        <span class="n">elm</span> <span class="o">*=</span> <span class="n">k</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>Now it becomes:</p><pre><code><div class="highlight"><span></span><span class="kt">void</span> <span class="nf">_ScaleRowBy</span><span class="p">(</span><span class="k">const</span> <span class="kt">uint32_t</span> <span class="o">&amp;</span><span class="n">row</span><span class="p">,</span> <span class="k">const</span> <span class="n">Type</span> <span class="o">&amp;</span><span class="n">k</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">_ModifyRowBy</span><span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">k</span><span class="p">](</span><span class="k">const</span> <span class="kt">uint32_t</span> <span class="o">&amp;</span><span class="n">col</span><span class="p">,</span> <span class="k">const</span> <span class="n">Type</span> <span class="o">&amp;</span><span class="n">old_value</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">old_value</span> <span class="o">*</span> <span class="n">k</span><span class="p">;</span>
    <span class="p">};</span>
<span class="p">}</span>
</div></code></pre><p>No real difference in size, but our new <code>_ModifyRowBy</code> function now allows us to write our "Subtract row by a multiple of another row" function as follows:</p><pre><code><div class="highlight"><span></span><span class="kt">void</span> <span class="nf">_SubtractRowByRowMultiple</span><span class="p">(</span><span class="k">const</span> <span class="kt">uint32_t</span> <span class="o">&amp;</span><span class="n">row_to_modify</span><span class="p">,</span> <span class="k">const</span> <span class="kt">uint32_t</span> <span class="o">&amp;</span><span class="n">other_row</span><span class="p">,</span> <span class="k">const</span> <span class="n">Type</span> <span class="o">&amp;</span><span class="n">k</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">_ModifyRowBy</span><span class="p">(</span><span class="n">row_to_modify</span><span class="p">,</span> <span class="p">[</span><span class="k">this</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">other_row</span><span class="p">](</span><span class="k">const</span> <span class="kt">uint32_t</span> <span class="o">&amp;</span><span class="n">col</span><span class="p">,</span> <span class="k">const</span> <span class="n">Type</span> <span class="o">&amp;</span><span class="n">old_value</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">old_value</span> <span class="o">-</span> <span class="p">(</span><span class="n">matrix_</span><span class="p">[</span><span class="n">other_row</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">*</span> <span class="n">k</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">}</span>
</div></code></pre><p>Here we tell <code>_ModifyRowBy</code> we want to modify <code>row_to_modify</code>. We then have to capture, <code>this</code>, <code>k</code>, <code>other_row</code> because we want to use them inside our lambda function (between the curly braces).</p><blockquote><p>Note that even though <code>this</code> isnt used explicitly in our lambda, we need it for <code>matrix_</code> since that variable is really <code>this-&gt;matrix_</code>.</p></blockquote><p>Then given some row value <code>old_value</code> we want to subtract <code>k * matrix_[other_row][col]</code> (k times our other row's value).</p><p>With this complete we should be able to chain these functions together and reduce our matrix. Let's hook these functions together and update our <code>main.cpp</code>.</p><h3>Row Echelon Form</h3><p>Our Row echelon form function will be <code>public</code> and look as follows:</p><pre><code><div class="highlight"><span></span><span class="kt">void</span> <span class="nf">ReduceToRowEchelonForm</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">uint32_t</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
             <span class="n">c</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span><span class="p">(</span><span class="n">r</span> <span class="o">&lt;</span> <span class="n">NumRows</span> <span class="o">&amp;&amp;</span> <span class="n">c</span> <span class="o">&lt;</span> <span class="n">NumCols</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">const</span> <span class="k">auto</span> <span class="o">&amp;</span><span class="n">leading_1_pos</span> <span class="o">=</span> <span class="n">_LocateNextLeadingOnePosition</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">c</span><span class="p">));</span>

        <span class="c1">// Check if our optional has a value</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">leading_1_pos</span><span class="p">.</span><span class="n">has_value</span><span class="p">())</span> <span class="p">{</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">// Get values our of our optional</span>
        <span class="k">const</span> <span class="k">auto</span><span class="p">[</span><span class="n">leading_1_row</span><span class="p">,</span> <span class="n">leading_1_col</span><span class="p">]</span> <span class="o">=</span> <span class="n">leading_1_pos</span><span class="p">.</span><span class="n">value</span><span class="p">();</span>

        <span class="c1">// Check if we should swap rows</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">leading_1_row</span> <span class="o">!=</span> <span class="n">r</span><span class="p">)</span> <span class="p">{</span> 
            <span class="n">_SwapRows</span><span class="p">(</span><span class="n">leading_1_row</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">// Produce leading 1</span>
        <span class="n">_ScaleRowBy</span><span class="p">(</span><span class="n">leading_1_row</span><span class="p">,</span> <span class="mf">1.0</span> <span class="o">/</span> <span class="n">matrix_</span><span class="p">[</span><span class="n">leading_1_row</span><span class="p">][</span><span class="n">leading_1_col</span><span class="p">]);</span>
        
        <span class="c1">// Zero out all values below leading 1</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">uint32_t</span> <span class="n">below_row</span> <span class="o">=</span> <span class="n">leading_1_row</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="n">below_row</span> <span class="o">&lt;</span> <span class="n">NumRows</span><span class="p">;</span> <span class="n">below_row</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">_SubtractRowByRowMultiple</span><span class="p">(</span><span class="n">below_row</span><span class="p">,</span> <span class="n">leading_1_row</span><span class="p">,</span> <span class="n">matrix_</span><span class="p">[</span><span class="n">below_row</span><span class="p">][</span><span class="n">leading_1_col</span><span class="p">]);</span>
        <span class="p">}</span>

        <span class="n">r</span> <span class="o">=</span> <span class="p">(</span><span class="n">leading_1_row</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
        <span class="n">c</span> <span class="o">=</span> <span class="p">(</span><span class="n">leading_1_col</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>and our <code>main.cpp</code> will be updated to the following:</p><pre><code><div class="highlight"><span></span><span class="cp">#include</span> <span class="cpf">&quot;linalg/matrix.h&quot;</span><span class="cp"></span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">mathlib</span><span class="o">::</span><span class="n">linalg</span><span class="o">::</span><span class="n">Matrix</span><span class="o">&lt;</span><span class="kt">float</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="o">&gt;</span> <span class="n">matrix</span><span class="p">;</span>
    <span class="n">matrix</span> <span class="o">&lt;&lt;</span> <span class="mi">10</span><span class="p">,</span>   <span class="mi">83</span><span class="p">,</span>  <span class="mi">33</span><span class="p">,</span>  <span class="mi">931</span><span class="p">,</span>  <span class="mi">11</span><span class="p">,</span>
              <span class="mi">65</span><span class="p">,</span>  <span class="o">-</span><span class="mi">12</span><span class="p">,</span>   <span class="mi">3</span><span class="p">,</span>   <span class="mi">99</span><span class="p">,</span>   <span class="mi">9</span><span class="p">,</span>
              <span class="mi">81</span><span class="p">,</span>    <span class="mi">5</span><span class="p">,</span> <span class="mi">653</span><span class="p">,</span> <span class="o">-</span><span class="mi">125</span><span class="p">,</span> <span class="mi">271</span><span class="p">,</span>
              <span class="mi">144</span><span class="p">,</span>  <span class="mi">32</span><span class="p">,</span>  <span class="mi">77</span><span class="p">,</span>  <span class="o">-</span><span class="mi">30</span><span class="p">,</span> <span class="o">-</span><span class="mi">15</span><span class="p">,</span>
              <span class="mi">10</span><span class="p">,</span>   <span class="mi">49</span><span class="p">,</span>  <span class="mi">95</span><span class="p">,</span>   <span class="mi">61</span><span class="p">,</span>  <span class="o">-</span><span class="mi">9</span><span class="p">;</span>
              
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;---------------Matrix---------------&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="n">matrix</span><span class="p">.</span><span class="n">Print</span><span class="p">();</span>
    <span class="n">matrix</span><span class="p">.</span><span class="n">ReduceToRowEchelonForm</span><span class="p">();</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;-------- Row Echelon Form ----------&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="n">matrix</span><span class="p">.</span><span class="n">Print</span><span class="p">();</span>
<span class="p">}</span>
</div></code></pre><p>Let's give this a whirl!</p><p>Output ( in latex form ):</p><html><header><script type="text/x-mathjax-config">MathJax.Hub.Config({jax: ["input/TeX","output/HTML-CSS"], tex2jax: {inlineMath: [['$$','$$']]} , "HTML-CSS": {linebreaks: {automatic: true}}});</script><script src='https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'></script></header><body>$$
\begin{bmatrix}
10 & 83 & 33 & 931 & 11\\
65 & -12 & 3 & 99 & 9\\
81 & 5 & 653 & -125 & 271\\
144 & 32 & 77 & -30 & -15\\
10 & 49 & 95 & 61 & -9\\
\end{bmatrix}
$$
$$
\begin{bmatrix}
1 & 0 & 33 & 931 & 11\\
0 & 0 & 1 & 33 & 3\\
-0 & -0 & -0 & 1 & 0.0778813\\
-0 & -0 & -0 & -0 & 1\\
0 & 0 & 0 & 0 & 0\\
\end{bmatrix}
$$</body></html><p>Heyyy! Exactly what we hoped for (minus the minus signs before the 0's)!</p><p>Alright, I think this is a good place to stop for today. Today we implemented Guassian Elimination in our Matrix class. Next up is Gauss-Jordan Elimination. That is only a minor modifcation to Guassian Elimination so hopefully we breeze through that!</p><p>Until then,</p><p>-- Ehud</p>]]></content:encoded></item><item><guid isPermaLink="true">blog.ehudadler.com/linear/matrix</guid><title>1.1 System of Equation and Matricies</title><description>Building the start of a matrix class.</description><link>blog.ehudadler.com/linear/matrix</link><pubDate>Mon, 30 Nov 2020 22:37:00 -0500</pubDate><content:encoded><![CDATA[<p>Alrighty. So here we are. The format I was thinking of going with is: Reading through: <a href="https://www.amazon.com/Elementary-Linear-Algebra-Howard-Anton/dp/0470458216/ref=sr_1_3?dchild=1&keywords=howard+anton&qid=1606782925&sr=8-3">Howard Anton's Elementary Linear Algebra 7th Edition</a> and extending my <code>cpp</code> library as I learn new things.</p><h1>1.1 System of Equation and Matricies</h1><p>In this chapter most of the writing seems to be focused on explaining how systems of equations can be represented as a Matrix. So, here I am going to focus on the Matrix side of things and start our first class. The Matrix class.</p><h2>The Matrix class ( Outline )</h2><p>I want to plan out a bit how this Matrix class will look. In cpp we have the power of non-type template parameters. This means we can pass values (like constants!) into templates rather than types.</p><p>This seems to be the classic convention (see <a href="https://eigen.tuxfamily.org/dox/group__TutorialMatrixClass.html">Eigen</a>) and allows for compile time checks. These compile time checks are actually pretty cool in my opinion. We know (from reading!) that to multiply matricies A &amp; B together, Matrix A must have the <em>exact</em> same number of rows as Matrix B has columns. Since we can pass values (the number of rows and columns) of our matricies in at compile time, we can enforce these constraints then (at compile time) rather than at runtime!</p><p>I also really like how Eigen provides the option to initialize matricies as follows:</p><pre><code><div class="highlight"><span></span><span class="n">Matrix3x3</span> <span class="n">mat</span><span class="p">;</span>
<span class="n">mat</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span>
       <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span>
       <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">;</span>
</div></code></pre><p>So let's try to throw that into our class as well. Well call that "comma initialization" (sounds cool).</p><p>So know how we want to initialize our class, we know how we want to define its size and value type. Time to choose how we want to store the data inside it.</p><p>I had given some thought to storing the values in a single array. Something like:</p><pre><code><div class="highlight"><span></span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>
</div></code></pre><p>Rather than the classical 2d:</p><pre><code><div class="highlight"><span></span><span class="p">[</span>
    <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
    <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span>
    <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>
<span class="p">]</span>
</div></code></pre><p>I think given a row, and column <code>(r, c)</code> getting a value is basically as easy in both cases.</p><p>Keeping with the classic (2d array) seems like the best approach and most straight forward. In <code>swift</code> there is a good reason for going the single array route (Wanting to use <code>ublas/cblas</code> in <code>Accelerate</code>) but the purpose of this class isn't for <code>cpp</code> as much as allowing us to implement some linear algebra so let's go with with the 2d approach.</p><p>I'll use <code>std::vector</code> as my array and create a type-alias so I don't have to continously type the arduous <code>std::vector&lt;std::vector....&gt;</code> each and every time.</p><blockquote><p>Digression: Halfway through this post and I can tell this blog will be teaching me how to spell better.</p></blockquote><p>Anyways, our type-alias will look like this:</p><pre><code><div class="highlight"><span></span><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">K</span><span class="o">&gt;</span>
<span class="k">using</span> <span class="n">Dataframe</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">K</span><span class="o">&gt;</span> <span class="o">&gt;</span><span class="p">;</span>
</div></code></pre><p>I'm calling this 2d vector a "Dataframe". I feel like a Dataframe is a more relaxed Matrix. It can take any type of value and it doesn't have any special methods you can call on it. I guess I think of it as the data structure behind a Matrix (??? does that make sense ???).</p><blockquote><p>We use <code>using</code> here rather than <code>typedef</code> because <code>typedef</code> does not work with <code>template</code> parameters.</p></blockquote><p>That is all that we need for section 1.1. Let's begin</p><h2>The Matrix class</h2><h3>Start</h3><p>First off is defining the class. We want the rows, columns, and type being stored to be passed in at compile time via non-type template arguments so lets start there.</p><p>Our template will look something like:</p><pre><code><div class="highlight"><span></span><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Type</span><span class="p">,</span> <span class="kt">uint32_t</span> <span class="n">NumRows</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="kt">uint32_t</span> <span class="n">NumCols</span> <span class="o">=</span> <span class="mi">0</span><span class="o">&gt;</span>
<span class="k">class</span> <span class="nc">Matrix</span> <span class="p">{};</span>
</div></code></pre><p>Here we've defined our template to take 3 parameters. The first of the three is the type which the matrix will hold, the second is the number of rows our matrix should have, and the last is the number of columns.</p><p>At the moment (and this is unlikely the change) our matrix will be filled stricly with numeric values. We shouldn't allow the user to pass in <code>std::string</code> or some other types.</p><p>Additionally, we want this check to happen at compile time again. To enable this we will use <code>static_assert</code> to run a check at compile time on the passed in type (<code>Type</code>), verifying that it in indeed a numeric value.</p><p>More specifically, we want the type to be either an integral value (<code>short</code>, <code>int</code>, <code>long</code>, <code>long long</code>..etc) or a floating-point value (<code>float</code>, <code>double</code>...).</p><p>Fortunately for us, <code>cpp</code> has a built in check: <a href="https://en.cppreference.com/w/cpp/types/is_arithmetic">std:: is_arithmetic</a>, which is exactly what we are looking for.</p><p>We end up with something like this,</p><pre><code><div class="highlight"><span></span><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Type</span><span class="p">,</span> <span class="kt">uint32_t</span> <span class="n">NumRows</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="kt">uint32_t</span> <span class="n">NumCols</span> <span class="o">=</span> <span class="mi">0</span><span class="o">&gt;</span>
<span class="k">class</span> <span class="nc">Matrix</span> <span class="p">{</span>
    <span class="k">static_assert</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">is_arithmetic</span><span class="o">&lt;</span><span class="n">Type</span><span class="o">&gt;::</span><span class="n">value</span><span class="p">,</span>
                  <span class="s">&quot;Matrix value must have an integral or floating point type&quot;</span><span class="p">);</span>
<span class="p">};</span> <span class="c1">// Matrix</span>
</div></code></pre><p>This is looking good!</p><p>Let's add in our <code>Dataframe</code> type-alias, and create our instance variable:</p><pre><code><div class="highlight"><span></span><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Type</span><span class="p">,</span> <span class="kt">uint32_t</span> <span class="n">NumRows</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="kt">uint32_t</span> <span class="n">NumCols</span> <span class="o">=</span> <span class="mi">0</span><span class="o">&gt;</span>
<span class="k">class</span> <span class="nc">Matrix</span> <span class="p">{</span>

    <span class="c1">// Make sure that the templated `Type` parameter is valid</span>
    <span class="k">static_assert</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">is_arithmetic</span><span class="o">&lt;</span><span class="n">Type</span><span class="o">&gt;::</span><span class="n">value</span><span class="p">,</span>
                  <span class="s">&quot;Matrix value must have an integral or floating point type&quot;</span><span class="p">);</span>
                  
<span class="k">public</span><span class="o">:</span>
    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">K</span><span class="o">&gt;</span>
    <span class="k">using</span> <span class="n">Dataframe</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">K</span><span class="o">&gt;</span> <span class="o">&gt;</span><span class="p">;</span>
    
<span class="k">private</span><span class="o">:</span>    
    <span class="n">Dataframe</span><span class="o">&lt;</span><span class="n">Type</span><span class="o">&gt;</span> <span class="n">matrix_</span><span class="p">;</span>
<span class="p">};</span> <span class="c1">// Matrix</span>
</div></code></pre><p>Since we already know (at compile time) the number of rows and columns, we might as well initialize our <code>matrix_</code> instance variable now.</p><pre><code><div class="highlight"><span></span><span class="c1">// Matrix Class</span>

<span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Type</span><span class="p">,</span> <span class="kt">uint32_t</span> <span class="n">NumRows</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="kt">uint32_t</span> <span class="n">NumCols</span> <span class="o">=</span> <span class="mi">0</span><span class="o">&gt;</span>
<span class="k">class</span> <span class="nc">Matrix</span> <span class="p">{</span>

    <span class="c1">// Make sure that the templated `Type` parameter is valid</span>
    <span class="k">static_assert</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">is_arithmetic</span><span class="o">&lt;</span><span class="n">Type</span><span class="o">&gt;::</span><span class="n">value</span><span class="p">,</span>
                  <span class="s">&quot;Matrix value must have an integral or floating point type&quot;</span><span class="p">);</span>
                  
<span class="k">public</span><span class="o">:</span>
    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">K</span><span class="o">&gt;</span>
    <span class="k">using</span> <span class="n">Dataframe</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">K</span><span class="o">&gt;</span> <span class="o">&gt;</span><span class="p">;</span>

<span class="k">private</span><span class="o">:</span>
    <span class="n">Dataframe</span><span class="o">&lt;</span><span class="n">Type</span><span class="o">&gt;</span> <span class="n">matrix_</span> <span class="o">=</span> <span class="n">Dataframe</span><span class="o">&lt;</span><span class="n">Type</span><span class="o">&gt;</span><span class="p">(</span><span class="n">NumRows</span><span class="p">,</span>
                                           <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Type</span><span class="o">&gt;</span><span class="p">(</span><span class="n">NumCols</span><span class="p">));</span>
<span class="p">};</span> <span class="c1">// Matrix</span>
</div></code></pre><p>Awesome. As narcissistic as I am, it's always good to test to make sure the code you wrote runs. Let's add in some <code>#inlcude</code> and build a <code>main.cpp</code>.</p><pre><code><div class="highlight"><span></span><span class="c1">// Main.cpp</span>

<span class="cp">#include</span> <span class="cpf">&quot;linalg/matrix.h&quot; // Import out lib</span><span class="cp"></span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">mathlib</span><span class="o">::</span><span class="n">linalg</span><span class="o">::</span><span class="n">Matrix</span><span class="o">&lt;</span><span class="kt">float</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>    <span class="mi">1</span><span class="o">&gt;</span> <span class="n">matrix</span><span class="p">;</span>
                         <span class="c1">// Type   Rows  Cols</span>
<span class="p">}</span>
</div></code></pre><p>Works!</p><p>As hoped, building with:</p><pre><code><div class="highlight"><span></span><span class="c1">// Main.cpp</span>

<span class="cp">#include</span> <span class="cpf">&quot;linalg/matrix.h&quot; // Import out lib</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp"></span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">mathlib</span><span class="o">::</span><span class="n">linalg</span><span class="o">::</span><span class="n">Matrix</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>    <span class="mi">1</span><span class="o">&gt;</span> <span class="n">matrix</span><span class="p">;</span>
                               <span class="c1">// Type   Rows  Cols</span>
<span class="p">}</span>
</div></code></pre><p>fails with,</p><blockquote><p><code></code><code>error: static_assert failed due to requirement 'std::is_arithmetic&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; &gt;::value' "Matrix value must have an  integral or floating point type" static_assert(std::is_arithmetic&lt;Type&gt;::value,</code><code></code></p></blockquote><h2>Comma Init</h2><p>Time to initialize. Building the comma init. is 100% unnecessary, but fun. So...</p><p>The idea is as follows:</p><ol><li>We want to overload the <code>&lt;&lt;</code> operator so that when its called on our Matrix class, it returns a new class called CommaInit.</li><li>The CommaInit class has an overloaded <code>,</code> operator which:<ol start="3"><li>Adds the next value to our Matrix</li><li>Returns itself (CommaInit) to pick up the next <code>,</code> (if one exists))</li></ol></li></ol><p>This may seem compilicated, so let's dive into the code side of things and walk through it.</p><h3>Overload <code>&lt;&lt;</code></h3><p>Overloading functions is common in many languages. In <code>cpp</code> we can overload the <code>&lt;&lt;</code> by adding the following into our class:</p><pre><code><div class="highlight"><span></span><span class="n">CommaInit</span> <span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">Type</span> <span class="n">v</span><span class="p">)</span> <span class="p">{}</span>
</div></code></pre><p>We have yet to write our <code>CommaInit</code> class but we already know we want our <code>&lt;&lt;</code> overload to return that class type. Additionally we want to kick off this initialization when the type on the right side of the <code>&lt;&lt;</code> matches the type we are storing in our Matrix.</p><p>Recall our goal:</p><pre><code><div class="highlight"><span></span><span class="n">Matrix3x3</span> <span class="n">mat</span><span class="p">;</span>
<span class="n">mat</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span>
       <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span>
       <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">;</span>
</div></code></pre><p>I will put into parenthesis where our operator is taking place:</p><pre><code><div class="highlight"><span></span><span class="p">(</span><span class="n">mat</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">),</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span>
         <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span>
         <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">;</span>
</div></code></pre><p>After this operator occurs we will have:</p><pre><code><div class="highlight"><span></span><span class="n">commaInit</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span>
        <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span>
        <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">;</span>
</div></code></pre><p>which is exactly what we want. Now the <code>commaInit</code> object is next to a comma which will kick off that part of the sequence.</p><p>Before getting ahead of ourselves let's finish implementing the overload.</p><p>Notice how the first value (the <code>1</code>) is gone after the overloaded function finishes. This means we need to place that value into our matrix before the overloaded function ends.</p><pre><code><div class="highlight"><span></span><span class="n">CommaInit</span> <span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">Type</span> <span class="n">v</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span><span class="p">;</span>
<span class="p">}</span>
</div></code></pre><p>Now we must create the <code>CommaInit</code> object and return it. One thing we know is that at this point the <code>CommaInit</code> class is about to take over and we still somehow need a way of altering the <code>matrix_</code>. To achieve this we will pass the address og our <code>matrix_</code> into the <code>CommaInit</code> constructor. This will allow <code>CommaInit</code> to mutate our <code>matrix_</code>.</p><pre><code><div class="highlight"><span></span><span class="n">CommaInit</span> <span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">Type</span> <span class="n">v</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">matrix_</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span><span class="p">;</span>
    <span class="k">return</span> <span class="nf">CommaInit</span><span class="p">(</span><span class="o">&amp;</span><span class="n">matrix_</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span> 
    <span class="c1">// The 1 here denotes that we are upto the 1th index of our matrix.</span>
    <span class="c1">// We already ingested the 0th index on the line before.</span>
<span class="p">}</span>
</div></code></pre><p>All that is left is to create the <code>CommaInit</code> class. I wont walk through this part exactly but the class is small and hopefully understandable:</p><pre><code><div class="highlight"><span></span><span class="k">struct</span> <span class="n">CommaInit</span> <span class="p">{</span>
    <span class="n">Dataframe</span><span class="o">&lt;</span><span class="n">Type</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">df</span><span class="p">;</span>
    <span class="kt">uint32_t</span> <span class="n">index</span><span class="p">;</span>
    <span class="n">CommaInit</span><span class="p">(</span><span class="n">Dataframe</span><span class="o">&lt;</span><span class="n">Type</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">df</span><span class="p">,</span> <span class="kt">uint32_t</span> <span class="n">index</span><span class="p">)</span> 
    <span class="o">:</span> <span class="n">df</span><span class="p">(</span><span class="n">df</span><span class="p">),</span> <span class="n">index</span><span class="p">(</span><span class="n">index</span><span class="p">)</span> <span class="p">{};</span>
    
    <span class="c1">// Overload the , operator</span>
    <span class="n">CommaInit</span> <span class="k">operator</span><span class="p">,(</span><span class="n">Type</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
        <span class="p">(</span><span class="o">*</span><span class="n">df</span><span class="p">)[</span><span class="n">index</span> <span class="o">/</span> <span class="n">NumCols</span><span class="p">][</span><span class="n">index</span> <span class="o">%</span> <span class="n">NumCols</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
        <span class="k">return</span> <span class="nf">CommaInit</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// Recursion-like</span>
    <span class="p">}</span>
<span class="p">};</span>
</div></code></pre><p>Let's add this to our Matrix class and try updating our <code>main.cpp</code></p><pre><code><div class="highlight"><span></span><span class="c1">// Matrix Class</span>

<span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Type</span><span class="p">,</span> <span class="kt">uint32_t</span> <span class="n">NumRows</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="kt">uint32_t</span> <span class="n">NumCols</span> <span class="o">=</span> <span class="mi">0</span><span class="o">&gt;</span>
<span class="k">class</span> <span class="nc">Matrix</span> <span class="p">{</span>

    <span class="c1">// Make sure that the templated `Type` parameter is valid</span>
    <span class="k">static_assert</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">is_arithmetic</span><span class="o">&lt;</span><span class="n">Type</span><span class="o">&gt;::</span><span class="n">value</span><span class="p">,</span>
                  <span class="s">&quot;Matrix value must have an integral or floating point type&quot;</span><span class="p">);</span>
                  
<span class="k">public</span><span class="o">:</span>
    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">K</span><span class="o">&gt;</span>
    <span class="k">using</span> <span class="n">Dataframe</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">K</span><span class="o">&gt;</span> <span class="o">&gt;</span><span class="p">;</span>

    <span class="k">struct</span> <span class="n">CommaInit</span> <span class="p">{</span>
        <span class="n">Dataframe</span><span class="o">&lt;</span><span class="n">Type</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">df</span><span class="p">;</span>
        <span class="kt">uint32_t</span> <span class="n">index</span><span class="p">;</span>
        <span class="n">CommaInit</span><span class="p">(</span><span class="n">Dataframe</span><span class="o">&lt;</span><span class="n">Type</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">df</span><span class="p">,</span> <span class="kt">uint32_t</span> <span class="n">index</span><span class="p">)</span> 
        <span class="o">:</span> <span class="n">df</span><span class="p">(</span><span class="n">df</span><span class="p">),</span> <span class="n">index</span><span class="p">(</span><span class="n">index</span><span class="p">)</span> <span class="p">{};</span>
        
        <span class="c1">// Overload the , operator</span>
        <span class="n">CommaInit</span> <span class="k">operator</span><span class="p">,(</span><span class="n">Type</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
            <span class="p">(</span><span class="o">*</span><span class="n">df</span><span class="p">)[</span><span class="n">index</span> <span class="o">/</span> <span class="n">NumCols</span><span class="p">][</span><span class="n">index</span> <span class="o">%</span> <span class="n">NumCols</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
            <span class="k">return</span> <span class="nf">CommaInit</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// Recursion-like</span>
        <span class="p">}</span>
    <span class="p">};</span>
    <span class="c1">// Everything here will be public</span>
    <span class="n">CommaInit</span> <span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">Type</span> <span class="n">v</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">matrix_</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span><span class="p">;</span>
        <span class="k">return</span> <span class="nf">CommaInit</span><span class="p">(</span><span class="o">&amp;</span><span class="n">matrix_</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span> 
        <span class="c1">// The 1 here denotes that we are upto the 1th index of our matrix.</span>
        <span class="c1">// We already ingested the 0th index on the line before.</span>
    <span class="p">}</span>
<span class="k">private</span><span class="o">:</span>    
    <span class="n">Dataframe</span><span class="o">&lt;</span><span class="n">Type</span><span class="o">&gt;</span> <span class="n">matrix_</span> <span class="o">=</span> <span class="n">Dataframe</span><span class="o">&lt;</span><span class="n">Type</span><span class="o">&gt;</span><span class="p">(</span><span class="n">NumRows</span><span class="p">,</span>
                                           <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Type</span><span class="o">&gt;</span><span class="p">(</span><span class="n">NumCols</span><span class="p">));</span>
<span class="p">};</span> <span class="c1">// Matrix</span>
</div></code></pre><pre><code><div class="highlight"><span></span><span class="c1">// main.cpp</span>
<span class="cp">#include</span> <span class="cpf">&quot;linalg/matrix.h&quot;</span><span class="cp"></span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">mathlib</span><span class="o">::</span><span class="n">linalg</span><span class="o">::</span><span class="n">Matrix</span><span class="o">&lt;</span><span class="kt">float</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="o">&gt;</span> <span class="n">matrix</span>
    <span class="n">matrix</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</div></code></pre><p>Seems to work. Let's confirm by adding a <code>Print</code> function which prints our matrix. Again, I'll just show the function. Nothing special here.</p><pre><code><div class="highlight"><span></span><span class="kt">void</span> <span class="nf">Print</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">NumRows</span> <span class="o">*</span> <span class="n">NumCols</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">matrix_</span><span class="p">[</span><span class="n">i</span> <span class="o">/</span> <span class="n">NumCols</span><span class="p">][</span><span class="n">i</span> <span class="o">%</span> <span class="n">NumCols</span><span class="p">];</span>
        <span class="k">if</span> <span class="p">((</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">NumCols</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; &quot;</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</div></code></pre><p>We get,</p><pre><code><div class="highlight"><span></span><span class="c1">// Matrix Class</span>

<span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">Type</span><span class="p">,</span> <span class="kt">uint32_t</span> <span class="n">NumRows</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="kt">uint32_t</span> <span class="n">NumCols</span> <span class="o">=</span> <span class="mi">0</span><span class="o">&gt;</span>
<span class="k">class</span> <span class="nc">Matrix</span> <span class="p">{</span>

    <span class="c1">// Make sure that the templated `Type` parameter is valid</span>
    <span class="k">static_assert</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">is_arithmetic</span><span class="o">&lt;</span><span class="n">Type</span><span class="o">&gt;::</span><span class="n">value</span><span class="p">,</span>
                  <span class="s">&quot;Matrix value must have an integral or floating point type&quot;</span><span class="p">);</span>
                  
<span class="k">public</span><span class="o">:</span>
    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">K</span><span class="o">&gt;</span>
    <span class="k">using</span> <span class="n">Dataframe</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">K</span><span class="o">&gt;</span> <span class="o">&gt;</span><span class="p">;</span>

    <span class="p">...</span> <span class="n">See</span> <span class="n">above</span> <span class="k">for</span> <span class="n">other</span> <span class="n">code</span>
    
    <span class="kt">void</span> <span class="n">Print</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">NumRows</span> <span class="o">*</span> <span class="n">NumCols</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">matrix_</span><span class="p">[</span><span class="n">i</span> <span class="o">/</span> <span class="n">NumCols</span><span class="p">][</span><span class="n">i</span> <span class="o">%</span> <span class="n">NumCols</span><span class="p">];</span>
            <span class="k">if</span> <span class="p">((</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">NumCols</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; &quot;</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="k">private</span><span class="o">:</span>    
    <span class="n">Dataframe</span><span class="o">&lt;</span><span class="n">Type</span><span class="o">&gt;</span> <span class="n">matrix_</span> <span class="o">=</span> <span class="n">Dataframe</span><span class="o">&lt;</span><span class="n">Type</span><span class="o">&gt;</span><span class="p">(</span><span class="n">NumRows</span><span class="p">,</span>
                                           <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Type</span><span class="o">&gt;</span><span class="p">(</span><span class="n">NumCols</span><span class="p">));</span>
<span class="p">};</span> <span class="c1">// Matrix</span>
</div></code></pre><pre><code><div class="highlight"><span></span><span class="c1">// main.cpp</span>

<span class="cp">#include</span> <span class="cpf">&quot;linalg/matrix.h&quot;</span><span class="cp"></span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">mathlib</span><span class="o">::</span><span class="n">linalg</span><span class="o">::</span><span class="n">Matrix</span><span class="o">&lt;</span><span class="kt">float</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="o">&gt;</span> <span class="n">matrix</span><span class="p">;</span>
    <span class="n">matrix</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span>
              <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span>
              <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">;</span>
    <span class="n">matrix</span><span class="p">.</span><span class="n">Print</span><span class="p">();</span>
<span class="p">}</span>
</div></code></pre><p>Running this give:</p><pre><code><div class="highlight"><span></span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span>
<span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span>
<span class="mi">7</span> <span class="mi">8</span> <span class="mi">9</span>
</div></code></pre><p>Exactly what we hoped for.</p><p>It's getting late and I feel this was a good start at our matrix class. Section 1.2 deals with Gaussian Elimination so looks like that is our next step!</p><p>-- Ehud</p>]]></content:encoded></item><item><guid isPermaLink="true">blog.ehudadler.com/linear/a-journey-begins</guid><title>A journey begins</title><description>The start of a long journey.</description><link>blog.ehudadler.com/linear/a-journey-begins</link><pubDate>Sat, 28 Nov 2020 18:47:00 -0500</pubDate><content:encoded><![CDATA[<h1>Hello.</h1><h2>Here we go again..</h2><p>Although the number of times I have tried to start a blog <em>can</em> be counted on one hand, I already recognize (at least to some extent) the time and energy that goes into writing one.</p><p>In the past I feel I've chosen general topics which although interesting, did not exert a strong enough pull on me to write. Naturally, I am hoping this time is different.</p><h2>Whoami</h2><p>Hi. My name is Ehud Adler and as I write this I am currently at home, during the later stages of a world wide pandemic (the corona virus). I graduated from Queens College (CUNY) almost 6 months ago and started my full-time employment at Apple.</p><p>When I was in high-school I was what you may call a poor student. I won't say "bad", because that sounds to me as if I was a trouble maker. I was not. I just wasn't so into homework, studying etc.</p><p>I did well in subjects I was interested in and did fine in the rest. I wasn't a failing student, just not top of the class. One subject I never did well in was Math.</p><p>Not much changed in terms of studying until I took a gap year in Israel. My days in Israel we're filled with sitting, focusing and analytical learning. All of a sudden I was actually willing to sit down and study and learn. This bode well for my future college career.</p><p>With my new ability to study I began college and pursuit of a CS degree on the right foot. I took Calculus I in my first semester and got an A! Although this shocked me (and most likely my parents), I still was not a lover of math. Something about calculus just didn't draw me in the way applied math (computer science) did. At Queens, and most likely at many other colleges, Computer Science and Math overlap enough that a common track for students to take is CS Major + Math Minor (or the opposite). One semester in and I realized, that wasn't me.</p><p>Second semester rolls around and I decide to take 2 math courses. Calc II and Linear Algebra. Calc II was easier than Calc I for me (maybe it was the professor). I enjoyed it, but not enough to change my mind on getting a Math minor. That change of mind came from Linear Algebra.</p><p>Linear Algebra changed my college career. I find it interesting that although I enjoy Applied Math (Computer Science), it was abstract math (Linear Algebra) which won my love.</p><p>That semester I changed my college path. I was going to double major.</p><p>Since that linear class I've taken: Multi-variable Calc, Vector Calc, Abstract Algebra, Number Theory, Stat I, Stat II</p><p>It probably wouldn't shock you if I told you my favorites were: Abstract Algebra and Number Theory.</p><p>So with that background on me, let's get into the idea behind this blog</p><h2>The idea behind this blog</h2><p>Recently I picked up my Linear Algebra textbook. I read it once a week, slowly making my way through it again. Being slighlty more confident in writing Cpp I found myself thinking about how I would program Gaussian Elimination, Matrix Multiplication, etc. I thought, maybe I should write a cpp linear algebra library. I know professional ones exist but I've always been one of those people who learns best from doing.</p><p>This blog is my attempt to share my journey writing math libraries in cpp. I will work through my favorite math textbooks, implementing the mathematical algorithms/concepts in code when I see fit.</p><p>I will add a disclaimer that I won't be looking to necessarily write the most efficient or beauitful code. That can always come later.</p><p>That being said, feedback and comments are always welcome!</p><p>-- Ehud A.</p>]]></content:encoded></item><item><guid isPermaLink="true">blog.ehudadler.com/general/hello</guid><title>Hello.</title><description>This blog.</description><link>blog.ehudadler.com/general/hello</link><pubDate>Sat, 28 Nov 2020 18:47:00 -0500</pubDate><content:encoded><![CDATA[<h1>Hello.</h1><p>I see how it maybe confusing that this blog has 2 posts which start off "Hello.".</p><p>To be honest, originally the "Hello World" post for this blog was supposed to be the one you can now find in the linear algebra section of this site. That is because the original idea to start this blog came from want to share a journey of linear algebra with the world.</p><p>Change of plans.</p><p>I enjoyed writing out my Hello Linear Algebra post and decided if I was going to have a chance in being "active" on this site, I'd need a few more topics to chat about. So here we are.</p><p>I obviously will continue (start :) ) the Linear Algebra series of this blog but I will additionally add a "Interview Questions" and General section.</p><p>The interview section i'm sure (NOT) will come as a shock to those who know me.</p><p>The general section is here because sometimes what I want to say wont fit into an on-going series.</p><p>With that said, I encourage you to read the OG Hello post located in the Linear Algebra series and enjoy!</p><p>-- Ehud</p>]]></content:encoded></item></channel></rss>